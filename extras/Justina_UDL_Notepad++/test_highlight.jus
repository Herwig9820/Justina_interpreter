    /*------------------------------------------------------------------------------------------------------------------------
    list with all defined symbols in Justina version 10401, with proper highlighting
    
 	The Justina interpreter library is licensed under the terms of the GNU General Public License v3.0 as published      
    by the Free Software Foundation (https://www.gnu.org/licenses).                                                      
    Refer to GitHub for more information and documentation: https://github.com/Herwig9820/Justina_interpreter            
                                                                                                                         
    This example Justina code is in the public domain                                                                            
                                                                                                                         
    2024, 2025 Herwig Taveirne                                                                                                
    ------------------------------------------------------------------------------------------------------------------------*/
    
    commands (control block stat.: bold)                            functions                                                                           predefined constants                                    operators           
    ------------------------------------------------------------    --------------------------------------------------------------------------------    ---------------------------------------------------     ----------------    
                                                                    
    var                 moveBP              exec                    sqrt                    tone                ascToHexStr         fmt                 e                   CANCELED            BOARD_RP2040    =                   
    const               enableBP            ditch                   sin                     pulseIn             hexStrToAsc         tab                 PI                  OK                  BOARD_ESP32     +=                  
    static              disableBP           gotoLabel               cos                     shiftIn             quote               col                 HALF_PI             NOK                 BOARD_NRF52840  -=                  
    delete              raiseError          silent                  tan                     shiftOut            isAlpha             pos                 QUART_PI            CONSOLE                             *=              
    clearMem            trapErrors                                  asin                    random              isAlphaNumeric      open                TWO_PI              IO1                                 /=                  
    clearProg           clearError                                  acos                    randomSeed          isDigit             close               DEG_TO_RAD          IO2                                 %=                  
    loadProg            quit                                        atan                    bit                 isHexDigit          position            RAD_TO_DEG          IO3                                 <<=                 
    program             dispWidth                                   ln                      bitRead             isControl           size                RADIANS             IO4                                 >>=                 
    function            floatFmt                                    lnp1                    bitClear            isGraph             seek                DEGREES             FILE1                               &=                                     
    procedure           intFmt                                      log10                   bitSet              isPrintable         name                INTEGER             FILE2                               |=                  
    for                 dispMode                                    exp                     bitWrite            isPunct             fullName            FLOAT               FILE3                               ^=                  
    while               tabSize                                     expm1                   byteRead            isWhitespace        isDirectory         STRING              FILE4                               ++  
    if                  angleMode                                   round                   byteWrite           isAscii             rewindDirectory     FALSE               FILE5                               --                  
    elseif              setConsole                                  ceil                    maskedWordRead      isLowerCase         openNext            TRUE                DISCARD                             <                   
    else                setConsoleIn                                floor                   maskedWordClear     isUpperCase         exists              OFF                 READ                                >                   
    end                 setConsoleOut                               trunc                   maskedWordSet       eval                createDirectory     ON                  WRITE                               <=                  
    break               setDebugOut                                 min                     maskedWordWrite     ubound              removeDirectory     LOW                 APPEND                              >=                  
    continue            info                                        max                     mem32Read           dims                remove              HIGH                SYNC                                !=                  
    return              input                                       abs                     mem32Write          type                fileNum             INPUT               NEW_OK                              ==                  
    pause               startSD                                     signBit                 mem8Read            r                   isInUse             OUTPUT              NEW_ONLY                            +   
    halt                stopSD                                      fmod                    mem8Write           err                 closeAll            INPUT_PULLUP        TRUNC                               -   
    stop                receiveFile                                 ifte                    char                isColdStart                             INPUT_PULLDOWN      EOF                                 *   
    nop                 sendFile                                    switch                  len                 sysVal              p                   LED_BUILTIN         FIXED                               /   
    go                  copyFile                                    index                   line                cin                                     LED_RED             EXP                                 %   
    step                dbout                                       choose                  asc                 cinLine                                 LED_GREEN           EXP_U                               **  
    stepOut             dboutLine                                   cInt                    rtrim               cinList                                 LED_BLUE            SHORT                               &&  
    stepOver            cout                                        cFloat                  ltrim               read                                    LSBFIRST            SHORT_U                             ||  
    bStepOut            coutLine                                    cStr                    trim                readLine                                MSBFIRST            DEC                                 !   
    loop                coutList                                    millis                  left                readList                                NO_PROMPT           HEX                                 <<  
    watch               print                                       micros                  mid                 vreadList                               PROMPT              HEX_U                               >>  
    watchExprOn         printLine                                   wait                    right               find                                    ECHO                CHARS                               &   
    watchExprOff        printList                                   digitalRead             toUpper             findUntil                               NO_RESULTS          FMT_LEFT                            |   
    setNextLine         vprint                                      digitalWrite            toLower             peek                                    RESULTS             FMT_SIGN                            ^   
    abort               vprintLine                                  pinMode                 space               available                               QUOTE_RES           FMT_SPACE                           ~   
    debug               vprintList                                  analogRead              repeatChar          flush                                   ENTER               FMT_POINT                           ;   
    BPon                listCallStack                               analogReference         replaceChar         setTimeout                              ENTER_CANCEL        FMT_0X                              ,   
    BPoff               listBP                                      analogWrite             findStr             getTimeout                              YES_NO              FMT_000                             (   
    BPactivate          listVars                                    analogReadResolution    replaceStr          availableForWrite                       YN_CANCEL           FMT_NONE                            )   
    setBP               listFiles                                   analogWriteResolution   strCmp              getWriteError                           NO_DEFAULT          BOARD_OTHER                     
    clearBP             listFilesToSerial                           noTone                  strCaseCmp          clearWriteError                         ALLOW_DEFAULT       BOARD_SAMD          
    -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    literal constants (examples)                                    user c++ routines (prefix to force highlight)               comments
    -----------------------------------                             ---------------------------------------------               --------
                                                                                                                                    
    123                 /* integer               */                 cuf_    /* c++ user functions: prefixes */                   // this is a single-line comment 
    123.                /* floating point number */                 uf_     /* ensuring^proper highlighting */                   /* this is a multi- line comment */ 
    35e-4               /* floating point number */                 ufcn_                                                  
    0x12d2              /* integer (hex)         */                 usrf_                                                    
    "hello"             /* string                */                 cuc_    /* c++ user commands: prefixes  */                
                                                                    uc_     /* ensuring^proper highlighting */ 
                                                                    ucmd_   
                                                                    usrc_
    
       
    
    
    
