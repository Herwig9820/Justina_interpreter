list with all defined symbols in Justina, with proper highlighting
------------------------------------------------------------------

commands (control block stat.: bold)	functions																		predefined constants											operators			comments
------------------------------------    ----------------------------------------------------------------------------    ----------------------------------------    					----------------    -----------------------------------

var             	raiseError          sqrt				tone				ascToHexStr			fmt					e					CANCELED			BOARD_ESP32				=					// this is a single-line comment 
const           	trapErrors          sin					pulseIn             hexStrToAsc			tab					PI                  OK		 									+=					/* this is a multi- line comment */ 
static          	clearError          cos					shiftIn             quote				col                 HALF_PI             NOK 										-=					
delete          	quit                tan					shiftOut            isAlpha				pos                 QUART_PI            CONSOLE 									*=				
clearMem			dispWidth           asin				random              isAlphaNumeric		open                TWO_PI              IO1           								/=					literal constants (examples)
clearProg       	floatFmt            acos				randomSeed          isDigit				close               DEG_TO_RAD          IO2 										%=					-----------------------------------
loadProg        	intFmt              atan				bit                 isHexDigit			position            RAD_TO_DEG          IO3 										<<=					123					// integer
program         	dispMode            ln					bitRead             isControl			size                RADIANS             IO4											>>=					123.    			// floating point number
function        	tabSize             lnp1				bitClear            isGraph				seek                DEGREES             FILE1           							&=					35e-4				// floating point number                       
for           		angleMode           log10            	bitSet				isPrintable			name				INTEGER           	FILE2										|=					0x12e2				// integer (hex)
while           	setConsole          exp					bitWrite			isPunct				fullName            FLOAT               FILE3										^=					"hello"				// string
if              	setConsoleIn        expm1				byteRead            isWhitespace		isDirectory         STRING             	FILE4           							++	
elseif          	setConsoleOut       round				byteWrite           isAscii				rewindDirectory     FALSE               FILE5           							--					user cpp routines (prefix to highlight) 
else            	setDebugOut         ceil				maskedWordRead      isLowerCase			openNext            TRUE              	READ            							<					---------------------------------------
end             	info                floor				maskedWordClear     isUpperCase			exists              OFF                 WRITE           							>					
break           	input               trunc				maskedWordSet       eval				createDirectory     ON                  APPEND          							<=					user_
continue        	startSD             min					maskedWordWrite     ubound				removeDirectory     LOW                 SYNC            							>=	 				usr_
return          	stopSD              max					mem32Read           dims				remove              HIGH                NEW_OK          							!=					cpp_
pause           	receiveFile         abs					mem32Write          type				fileNum             INPUT               NEW_ONLY        							==					
halt            	sendFile            signBit				mem8Read            r					isInUse             OUTPUT              TRUNC           							+	
stop            	copyFile            fmod				mem8Write           err					closeAll            INPUT_PULLUP        EOF             							-	
nop             	dbout               ifte				char                isColdStart	                            INPUT_PULLDOWN      FIXED           							*	
go              	dboutLine           switch				len                 sysVal	                                LED_BUILTIN         EXP             							/	
step            	cout                index				line                cin	                                    LED_RED             EXP_U           							%	
stepOut         	coutLine            choose				asc                 cinLine	                                LED_GREEN           SHORT           							**	
stepOver        	coutList            cInt				rtrim               cinList	                                LED_BLUE            SHORT_U         							&&	
bStepOut        	print               cFloat				ltrim               read	                                LSBFIRST            DEC             							||	
loop				printLine           cStr				trim                readLine	                            MSBFIRST            HEX             							!	
trace           	printList           millis				left                readList	                            NO_PROMPT           HEX_U           							<<	
viewExprOn			vprint              micros				mid                 vreadList	                            PROMPT              CHARS										>>	
viewExprOff			vprintLine          wait				right               find	                                ECHO                FMT_LEFT       								&	
setNextLine			vprintList          digitalRead			toUpper             findUntil	                            NO_RESULTS          FMT_SIGN       								|	
abort           	listCallStack       digitalWrite		toLower             peek	                                RESULTS             FMT_SPACE      								^	
debug           	listBP              pinMode				space               available	                            QUOTE_RES           FMT_POINT      								~	
BPon				listVars            analogRead			repeatChar          flush	                                ENTER               FMT_0X         								;	
BPoff				listFiles           analogReference		replaceChar         setTimeout	                            ENTER_CANCEL        FMT_000        								,	
setBP				listFilesToSerial   analogWrite			findStr             getTimeout	                            YES_NO              FMT_NONE       								(	
clearBP	                                analogReadResolution	replaceStr      availableForWrite	                    YN_CANCEL           BOARD_OTHER     							)	
enableBP	                            analogWriteResolution	strCmp          getWriteError	                        NO_DEFAULT          BOARD_SAMD      				
disableBP	                            noTone			   	strCaseCmp          clearWriteError	                        ALLOW_DEFAULT 		BOARD_RP2040    	
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------