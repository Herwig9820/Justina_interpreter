/*----------------------------------------------------------------------------
	Sample JUSTINA program for use with the Justina interpreter.

	The program demonstates how to write data to an SD card and how to 
	immediately parse this data into variables when it's read back.
	
	Created March 2024 by Herwig Taveirne
	
	This example Justina code (this file) is in the public domain.
----------------------------------------------------------------------------*/
	
program SD_parseRecords;

/*-------------------------------------------------------------------------------------------
	this function creates a few records in an SD file named "people", each record is supposed
	to contain the name, eye and hair color, length, weight and age of a person.
-------------------------------------------------------------------------------------------*/

function writeRecords();
	
	startSD;																// in case the SD card was not yet initialized
	
	var testFile = 0;														// init as integer
	if (testFile = fileNum("people.txt")) > 0; close (testFile); end;		// verify the file is closed			

	// using printList instead of printLine:
	// - strings will be printed with surrounding quotes (safe for strings containing double quotes themselves)
	// - numbers will be written with full accuracy
	testFile = open("people.txt", WRITE | TRUNC | NEW_OK);					// note: nano ESP32 ALWAYS truncates on WRITE (discards TRUNC constant)
	printList testFile, "John", "blue", "gray", 172, 78.3, 23;
	printList testFile, "Percy", "brown", "brown", 168, 75.7, 58;
	printList testFile, "Tracy", "green", "gray", 175, 58.4, 42;
	printList testFile, "Basil", "blue", "red", 177, 81.2, 51;
	printList testFile, "Caroline", "green"; 								// incomplete record
	printList testFile, "Irene", "brown", "gray", 169, 61.8, 75;
	printList testFile, "no\\na\"me";										// enter backslash and double quote characters by preceding them with a backslash
	printList testFile, "Charles", "green", "blond", 172, 79.3, 48;
	
	close(testFile);

	// read back and print to console: 
	testFile = open("people.txt", READ);
	while (available(testFile) > 0);
		cout readLine(testFile);
	end;
	close(testFile);
end;


/*------------------------------------------------------------------------------------------
	this function parses information, stored in a specific format, into a list of variables.
	then the list is printed in a tabular format.
	you can choose to print the output to the console or to a file.
	if you choose 'to file', output will be sent to a file "table.txt".
------------------------------------------------------------------------------------------*/

function parseAndPrintRecords(toFile = FALSE);									// optional argument (default is CONSOLE)
		
	startSD;																	// in case the SD card was not yet initialized

	var streamOut = CONSOLE; 														// init output stream to console
		
	var fileIn = 0, fileOut = 0;												// init file numbers attributed to open files
	if (fileIn = fileNum("people.txt")) > 0; close (fileIn); end;				// verify the input file is closed			
	fileIn = open("people.txt", READ);	
	
	if toFile == TRUE; 															// note: '== TRUE' is optional
		if (fileOut = fileNum("table.txt")) > 0; close (fileOut); end;			// verify the output file is closed	
		streamOut = open("table.txt", WRITE | TRUNC | NEW_OK);
	end;
	
	var givenName ="", eyeColor="", hairColor="", length=0, weight=0., age = 0;	// initialise variables
	
	// print table header to output stream
	printLine streamOut, line(), "name", col(12), "eyes", col(20), "hair", col(26), " length", " weight", "   age";
	printLine streamOut, repChar("-", 26+7+7+6-1);
	
	// now parse each record read from the input file to a number of variables
	var variablesRead=0, incompleteRecords =0;
	while (available(fileIn) > 0);
		
		// reset variables in each loop, in case records read are incomplete
		variablesRead = readList(fileIn, givenName, eyeColor="", hairColor="", length=0, weight=0, age=0);
		if variablesRead < 5; incompleteRecords++; end;							// count number of incomplete records
		
		// print the record read to the output stream (console or file) in tabular format
		// use the fmt() function to format and right align table columns length, weight and age
		printLine streamOut, givenName, col(12), eyeColor, col(20), hairColor, 
			col(26), fmt(length, 7, 0, "d"), fmt(weight, 7, 1, "f"), fmt(age, 6, 0, "d");
	end;
	
	// close all files; if output was sent to a file, send it to console now 
	close(fileIn);
	if toFile; 
		close(streamOut); 
		coutLine;
		sendFile "table.txt", CONSOLE;
	end;
	
	return incompleteRecords;
end;